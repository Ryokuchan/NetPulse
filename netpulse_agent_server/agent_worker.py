# agent_worker.py
import argparse
import requests
import redis
import time
import sys
import os


class AgentWorker:
    def __init__(self, agent_id: str, region: str, redis_host: str, main_server: str):
        self.agent_id = agent_id
        self.region = region
        self.redis = redis.Redis(host=redis_host, port=6379, db=0, decode_responses=True)
        self.main_server = main_server
        self.running = True

    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            response = requests.post(
                f"{self.main_server}/api/agents/register",
                params={
                    "name": self.agent_id,
                    "location": self.region,
                    "capabilities": '["http", "https", "ping", "tcp", "dns", "traceroute"]'
                }
            )
            if response.status_code == 200:
                data = response.json()
                self.token = data["token"]
                print(f"‚úÖ Agent {self.agent_id} registered")
                return True
            else:
                print(f"‚ùå Registration failed: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Registration error: {e}")
            return False

    def send_heartbeat(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat"""
        try:
            response = requests.post(
                f"{self.main_server}/api/agents/{self.agent_id}/heartbeat"
            )
            if response.status_code != 200:
                print(f"‚ùå Heartbeat failed")
        except Exception as e:
            print(f"‚ùå Heartbeat error: {e}")

    def work(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        if not self.register():
            sys.exit(1)

        heartbeat_count = 0
        while self.running:
            try:
                # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat
                if heartbeat_count % 30 == 0:
                    self.send_heartbeat()

                # –ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task_data = self.redis.lpop("pending_tasks")
                if task_data:
                    task = json.loads(task_data)
                    print(f"üîÑ Agent {self.agent_id} processing task: {task['task_id']}")
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
                    time.sleep(2)

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                    self.redis.rpush("pending_tasks", json.dumps(task))

                time.sleep(1)
                heartbeat_count += 1

            except KeyboardInterrupt:
                self.running = False
            except Exception as e:
                print(f"‚ùå Worker error: {e}")
                time.sleep(5)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--id", required=True, help="Agent ID")
    parser.add_argument("--region", required=True, help="Region")
    parser.add_argument("--redis-host", default="localhost", help="Redis host")
    parser.add_argument("--main-server", required=True, help="Main server URL")

    args = parser.parse_args()

    worker = AgentWorker(args.id, args.region, args.redis_host, args.main_server)
    worker.work()