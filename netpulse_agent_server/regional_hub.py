# regional_hub.py
from fastapi import FastAPI, HTTPException
import sqlite3
import subprocess
import os
import signal
import json
import uuid
from typing import Dict, List
import threading
import time
from datetime import datetime

app = FastAPI(title="Regional Agent Hub")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞
REGION_ID = os.getenv("REGION_ID", "RU")
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
MAIN_SERVER_URL = os.getenv("MAIN_SERVER_URL", "http://localhost:8000")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
DB_PATH = "agents.db"


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS agents (
            id TEXT PRIMARY KEY,
            region TEXT NOT NULL,
            agent_name TEXT NOT NULL,
            process_id INTEGER,
            status TEXT DEFAULT 'stopped',
            created_at TEXT,
            last_heartbeat TEXT
        )
    ''')
    conn.commit()
    conn.close()


def get_db_connection():
    return sqlite3.connect(DB_PATH)


# API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏
@app.post("/api/agents/create")
def create_agents(count: int, agent_prefix: str = None):
    """–°–æ–∑–¥–∞—Ç—å N –∞–≥–µ–Ω—Ç–æ–≤"""
    if not agent_prefix:
        agent_prefix = f"{REGION_ID}-agent"

    created_agents = []
    for i in range(count):
        agent_id = f"{agent_prefix}-{i + 1}"

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen([
            "python", "agent_worker.py",
            "--id", agent_id,
            "--region", REGION_ID,
            "--redis-host", REDIS_HOST,
            "--main-server", MAIN_SERVER_URL
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO agents (id, region, agent_name, process_id, status, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (agent_id, REGION_ID, agent_id, process.pid, "running", datetime.now().isoformat()))
        conn.commit()
        conn.close()

        created_agents.append({
            "id": agent_id,
            "pid": process.pid,
            "status": "running"
        })

    return {"created_agents": created_agents}


@app.post("/api/agents/{agent_id}/stop")
def stop_agent(agent_id: str):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT process_id FROM agents WHERE id = ?", (agent_id,))
    result = cursor.fetchone()

    if not result:
        raise HTTPException(status_code=404, detail="Agent not found")

    pid = result[0]
    try:
        os.kill(pid, signal.SIGTERM)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute("UPDATE agents SET status = 'stopped' WHERE id = ?", (agent_id,))
        conn.commit()
        return {"status": "stopped", "agent_id": agent_id}
    except ProcessLookupError:
        cursor.execute("UPDATE agents SET status = 'dead' WHERE id = ?", (agent_id,))
        conn.commit()
        raise HTTPException(status_code=404, detail="Agent process not found")
    finally:
        conn.close()


@app.get("/api/agents")
def list_agents():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM agents WHERE region = ?", (REGION_ID,))
    agents = cursor.fetchall()
    conn.close()

    return [
        {
            "id": agent[0],
            "region": agent[1],
            "name": agent[2],
            "pid": agent[3],
            "status": agent[4],
            "created_at": agent[5],
            "last_heartbeat": agent[6]
        }
        for agent in agents
    ]


@app.post("/api/tasks/submit")
def submit_task(target: str, check_type: str, dns_type: str = None, port: int = None):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å"""
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ Redis –æ—á–µ—Ä–µ–¥—å
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞
    task_data = {
        "task_id": str(uuid.uuid4()),
        "target": target,
        "type": check_type,
        "dns_type": dns_type,
        "port": port,
        "region": REGION_ID,
        "created_at": datetime.now().isoformat()
    }

    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∞–≥–µ–Ω—Ç–∞–º —Ä–µ–≥–∏–æ–Ω–∞
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    return {
        "task_id": task_data["task_id"],
        "status": "submitted",
        "region": REGION_ID,
        "message": "Task submitted to regional queue"
    }


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
def startup():
    init_db()
    print(f"üöÄ Regional Hub started for region: {REGION_ID}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8001)